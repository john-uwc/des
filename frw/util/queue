#!/usr/bin/env bash

# queue structure
# author: steven, date:2017.3.31
# a kind of queue implement writing in shell script language


# structure is based on collection
# example:
# {} ---> {(element0)(element1)(element2)...}
#              |                          |
#              |-> head            tail <-|
# element should be any data structure


# manual
function queue_help(){
cat << TIPS
queue [container] <order> [<args>]
container: a memory var to store raw string of queue
order: o/poll/offer/empty/clr/init
args: ...
TIPS
}

# fetch the value of queue's head element
function queue_o(){
if [ $# -ne 1 -o "true" == "$(queue_empty "$1")" ]; then
return $_err_f_param_
fi
echo $(collection "$1" at 0)
}

# poll a element from head
function queue_poll(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo $(collection "$1" remove 0) # remove the head element
}

# offer a new element
function queue_offer(){
if [ $# -ne 2 ]; then
return $_err_f_param_
fi
echo $(collection "$1" insert "$2" $(collection "$1" size)) # append new element to the tail
}

# empty test
function queue_empty(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo $(collection "$1" empty)
}

# clear
function queue_clr(){
echo $(collection clr) # generate new collection for queue
}

# init, the same as clear
function queue_init(){
echo $(queue_clr)
}

# main entry
function queue(){
# while the raw parameter list has a single item,
# it must be "init", that is a rule

# parameters resolve and execute order
local container=$([ "init" == "$1" ] && echo "" || echo "${1:-""}")
local order=$([ "init" == "$1" ] && echo "$1" || echo "${2:-""}")
shift; shift # extra args
queue_$order "$container" "$@" || queue_help
}
