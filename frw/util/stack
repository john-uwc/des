#!/usr/bin/env bash

# stack structure
# author: steven, date:2017.3.31
# a kind of stack implement writing in shell script language

_include "frw/util/collection"

# manual
function stack_help(){
cat << TIPS
stack [container] <order> [<args>]
container: a memory var to store raw string of stack
order: o/pop/push/empty/clr/init
args: ...
TIPS
}

# fetch the value of the top element
function stack_o(){
if [ $# -ne 1 -o "true" == "$(stack_empty "$1")" ]; then
return $_err_f_param_
fi
echo $(collection "$1" at 0)
}

# pop the top element
function stack_pop(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo $(collection "$1" remove 0) # remove the top element
}

# push new element
function stack_push(){
if [ $# -ne 2 ]; then
return $_err_f_param_
fi
echo $(collection "$1" insert "$2" 0) # append new element to the head of stack
}

# empty test
function stack_empty(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo $(collection "$1" empty)
}

# clear
function stack_clr(){
echo $(collection clr) # generate new collection for stack
}

# init, the same as clear
function stack_init(){
echo $(stack_clr)
}

# main entry
function stack(){
# while the raw parameter list has a single item,
# it must be "init", that is a rule

# parameters resolve and execute order
local container=$([ "init" == "$1" ] && echo "" || echo "${1:-""}")
local order=$([ "init" == "$1" ] && echo "$1" || echo "${2:-""}")
shift; shift # extra args
stack_$order "$container" "$@" || stack_help
}
