#!/usr/bin/env bash

# tree structure
# author: steven, date:2018.3.18
# a kind of tree implement writing in shell script language

# structure is based on multi map
# example:
# {} ---> {(root|)}
#             |
#             -> {(root|{(node0|)(node1|) ...})}
#                           |
#                           -> {(root|{(node0|{(node11|)})(node1|) ...})}
# notion:
# leaf node -> "{(node|)}"
# non-leaf node -> "{(node|{})}"
# path(selector) -> "root:node:"


function __tree_selector(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo "${1//\:/ }"
}

# manual
function tree_help(){
cat << TIPS
tree [container] <order> [<args>]
container: a memory var to store raw string of tree
order: graft/sel/trav/clr/init
args: ...
TIPS
}

# graft sub branch to the tree
# trim a branch from the tree equals to graft a null
function tree_graft(){
if [ $# -ne 3 ]; then
return $_err_f_param_
fi
local r=""
local ts=$(stack init); local t="$1"
for sel in $(__tree_selector "$3"); do
if [ false = "$(stack "$ts" empty)" ]; then
t=$(stack "$ts" o); t=$(pair v "$t"); t=$(map "$t" get "$sel")
fi
ts=$(stack "$ts" push \
"$(pair new "$sel" "${t:-$(map init)}")" \
)
done
if [ ! -z "$2" ]; then
[ false = "$(map "$2" empty)" ] && r="$2" || r=$(map "$(map init)" put "$2" "")
fi
while [ false = "$(stack "$ts" empty)" ]; do
t=$(stack "$ts" o); ts=$(stack "$ts" pop)
r=$(map "$(pair v "$t")" put "$(pair k "$t")" "$r")
done
echo "$r"
}

# obtain sub branch with path
function tree_sel(){
if [ $# -ne 2 ]; then
return $_err_f_param_
fi
local r="$1"
for sel in $(__tree_selector "$2"); do
r=$(map "$r" get "$sel")
done
[ -z "$(pair v "$(collection "$r" at 0)")" ] && r="$(pair k "$(collection "$r" at 0)")"
echo "$r"
}

# traverse whole nodes of the tree
function tree_trav(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
local r=$(collection clr)
local t="$1"
local sp=""; local nv=""; local ts=$(stack init)
while [ false = "$(map "$t" empty)" \
            -o false = "$(stack "$ts" empty)" ]; do
for t in $(map "$t" eset); do
ts=$(stack "$ts" push "$(pair new "$sp$(pair k "$t")" "$(pair v "$t")")")
done
t=$(stack "$ts" o); ts=$(stack "$ts" pop)
if [ -z "$(pair v "$t")" ]; then
nv=$(pair k "$t"); nv=${nv#$sp}; nv=$(pair new "$sp" "$nv")
r=$(collection "$r" insert "$nv" 0)
continue
fi
sp=$(pair k "$t"):; t=$(pair v "$t")
done
echo "$(collection "$r" at)"
}

# clear
function tree_clr(){
echo $(map init) # generate root map for tree
}

# init, the same as clear
function tree_init(){
echo $(tree_clr)
}

# main entry
function tree(){
# while the raw parameter list has a single item,
# it must be "init", that is a rule

# parameters resolve and execute order
local container=$([ "init" == "$1" ] && echo "" || echo "${1:-""}")
local order=$([ "init" == "$1" ] && echo "$1" || echo "${2:-""}")
shift; shift # extra args
tree_$order "$container" "$@" || tree_help
}
