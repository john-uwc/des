#!/bin/bash

# map structure
# author: steven, date:2017.3.31
# a kind of map implement writing in shell script language

_include "lib/util/collection"

# manual
function map_help(){
cat << TIPS
map [container] <order> [<args>]
container: a memory var to store raw string of map
order: del/put/vset/eset/kset/get/empty/clr/init
args: ...
TIPS
echo
}

# remove the element tag with key
function map_del(){
if [ $# -ne 2 ]; then
return $_err_f_param_
fi
local r=$(collection "$1" ls $(pair new "$2" \*))
r=$(pair k ''$r)
echo $(collection $1 remove ''$r)
}

# update element's value tag with key
function map_put(){
if [ $# -ne 3 ]; then
return $_err_f_param_
fi
# if item tag with key is exist, 
# remove it, then append one to the head shipped with new value
local r=$(map_del "$1" "$2")
r=$(collection $r insert $(pair new "$2" "$3") 0)
echo "$r"
}

# element value set
function map_vset(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
local r=$(map_eset "$1") && echo $(pair v ''$r)
}

# fetch element set
function map_eset(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
local r=$(collection "$1" at) && echo "$r"
}

# element key set
function map_kset(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
local r=$(map_eset "$1") && echo $(pair k ''$r)
}

# fetch the value of the element tag with key
function map_get(){
if [ $# -ne 2 ]; then
return $_err_f_param_
fi
local r=$(collection "$1" ls $(pair new "$2" \*))
r=$(pair v ''$r) && r=$(pair v ''$r)
echo "$r"
}

# empty test
function map_empty(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo $(collection "$1" empty)
}

# clear
function map_clr(){
if [ $# -ne 1 ]; then
return $_err_f_param_
fi
echo $(collection "$1" clr) # generate new collection for map
}

# init, the same as clear
function map_init(){
echo $(map_clr "{}")
}

# main entry
function map(){
# while the raw parameter list has a single item,
# it must be "help" or "init", that is a rule
# resolve parameter list
local container=$([ "help" == "$1" -o "init" == "$1" ] && echo "" || echo ${1:-""})
local order=$([ "help" == "$1" -o "init" == "$1" ] && echo $1 || echo ${2:-""})
shift; shift # args for order
# order execute
_invoke_2c "map_$order" "$container" "$@" || map_help
}
